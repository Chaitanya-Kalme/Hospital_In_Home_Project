// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model patient {
  id                     String         @id @default(uuid()) @db.Uuid
  userName               String
  email                  String         @unique
  password               String
  avatar                 String?
  mobileNo               String
  isVerified             Boolean        @default(false)
  verificationCode       String?
  verificationCodeExpiry DateTime?
  resetCode              String?
  resetCodeExpiry        DateTime?
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
  subscriptions          Subscription[]
}

model Doctor {
  id                      String         @id @default(uuid()) @db.Uuid
  userName                String
  email                   String         @unique
  password                String
  avatar                  String
  mobileNo                String
  isVerified              Boolean        @default(false)
  resetCode               String?
  reserCodeExpiry         DateTime?
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
  specialites             String?
  documentForVerification String[]
  subscriptions           Subscription[]
}

model Subscription {
  id                  String        @id @default(uuid()) @db.Uuid
  isApprovedByDoctor  Boolean       @default(false)
  detailsAboutProblem String
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @default(now()) @updatedAt
  doctor              Doctor        @relation(fields: [doctorId], references: [id])
  doctorId            String        @db.Uuid
  patient             patient       @relation(fields: [patientId], references: [id])
  patientId           String        @db.Uuid
  Appointment         Appointment[]
  messages            Message[]
}

model Message {
  id              String       @id @default(uuid()) @db.Uuid
  messageText     String?
  messageDocument String?
  createdAt       DateTime     @default(now())
  updateAt        DateTime     @updatedAt
  userId          String       @db.Uuid
  subscriptionId  String       @db.Uuid
  subscription    Subscription @relation(fields: [subscriptionId], references: [id])
}

enum AppointmentMode {
  Offline
  Online
}

model Appointment {
  id                     String          @id @default(uuid()) @db.Uuid
  doctorId               String          @db.Uuid
  patientId              String          @db.Uuid
  appointmentDateAndTime DateTime
  mode                   AppointmentMode
  meetingLink            String? // Video Call Meeting Link
  subscriptionId         String          @db.Uuid
  subscription           Subscription    @relation(fields: [subscriptionId], references: [id])
}
